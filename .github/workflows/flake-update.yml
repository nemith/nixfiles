name: Update Nix Flakes
on:
  schedule:
   - cron: '0 8 * * *'  # 8am UTC daily
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-flakes:
    runs-on: ubuntu-latest
    env:
      branch_name: flake-updates
    steps:
      - name: Generate App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: '2' # We need the previous commit for history


      - name: Setup Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Nix
        uses: ./.github/actions/setup-nix

      - name: Check for existing update PR
        id: check-pr
        run: |
          existing_pr=$(gh pr list --state open --label "flake-update" --json number --jq '.[0].number // empty')
          echo "existing_pr_number=$existing_pr" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Setup branch
        run: |
          if [ -n "${{ steps.check-pr.outputs.existing_pr_number }}" ]; then
            echo "Updating existing branch: $branch_name"
            git fetch origin "$branch_name"
            git switch "$branch_name"
            git reset --hard origin/main  # Reset to latest main
          else
            echo "Creating new branch: $branch_name"
            git switch -c "$branch_name"
          fi

      - name: Update flake inputs
        id: update
        run: |
          nix flake update

          # Check if anything actually changed
          if git diff HEAD~1 --quiet flake.lock; then
            echo "No updates available"
            echo "updates_available=false" >> $GITHUB_OUTPUT
          else
            echo "updates_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate update summary
        if: steps.update.outputs.updates_available == 'true'
        run: |
          TMP_DIR=$(mktemp -d)
          git show HEAD~1:flake.lock > "$TMP_DIR/old_flake.lock"

          echo "::group::Old flake.lock"
          cat "$TMP_DIR/old_flake.lock"
          echo "::endgroup::"

          echo "::group::New flake.lock"
          cat flake.lock
          echo "::endgroup::"

          echo "## Flake Input Updates" | tee update_summary.md
          echo "" | tee -a update_summary.md

          # Compare old lock file with the current one and generate markdown
          jq -r --slurpfile old "$TMP_DIR/old_flake.lock" '
            .nodes as $new |
            $old[0].nodes as $old_nodes |
            $new | to_entries[] |
            select(.key != "root") |
            select(.value.locked.rev != ($old_nodes[.key].locked.rev // "unknown")) |
            .key as $name |
            .value.locked.rev[:8] as $new_rev |
            ($old_nodes[.key].locked.rev // "unknown")[:8] as $old_rev |
            .value.original as $orig |
            if ($orig.owner and $orig.repo) then
              "- **\($name)**: [`\($old_rev)`](https://github.com/\($orig.owner)/\($orig.repo)/commit/\($old_rev)) â†’ [`\($new_rev)`](https://github.com/\($orig.owner)/\($orig.repo)/commit/\($new_rev)) ([compare](https://github.com/\($orig.owner)/\($orig.repo)/compare/\($old_rev)...\($new_rev)))"
            else
              "- **\($name)**: `\($old_rev)` â†’ `\($new_rev)`"
            end
          ' flake.lock | tee -a update_summary.md

          # Clean up the temporary directory and its contents
          rm -rf "$TMP_DIR"

      - name: Push changes and update/create PR
        if: steps.update.outputs.updates_available == 'true'
        run: |
          # Commit the changes
          git add flake.lock
          git commit -m "chore: update Nix flake inputs" || {
            echo "No changes to commit"
            exit 0
          }

          git push -f origin "$branch_name" --force-with-lease

          # Prepbody
          pr_body=$(cat update_summary.md)
          pr_title="chore: update Nix flake inputs ($(date +%Y-%m-%d))"

          if [ -n "${{ steps.check-pr.outputs.existing_pr_number }}" ]; then
            # Update existing PR
            pr_number="${{ steps.check-pr.outputs.existing_pr_number }}"
            echo "Updating existing PR #$pr_number"

            # Update PR title and body
            gh pr edit "$pr_number" \
              --title "$pr_title" \
              --body "$pr_body"

            # Add a comment about the update
            pr_comment="ðŸ”„ **Flake inputs updated** ($(date '+%Y-%m-%d %H:%M UTC'))

            $pr_body"
            gh pr comment "$pr_number" --body "$pr_comment"
          else
            # Create new PR
            echo "Creating new PR"
            gh pr create \
              --title "$pr_title" \
              --body "$pr_body" \
              --label "flake-update"
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Clean up if no updates
        if: steps.update.outputs.updates_available == 'false'
        run: |
          echo "No flake updates available"
          if [ -n "${{ steps.check-pr.outputs.existing_pr_number }}" ]; then
            pr_number="${{ steps.check-pr.outputs.existing_pr_number }}"
            gh pr comment "$pr_number" --body "âœ… **No new updates available** (checked $(date '+%Y-%m-%d %H:%M UTC'))"
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
